name: BeeHomeCreateReleaseCandidate
on:
  workflow_dispatch:


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  
  BeeHomeCreateReleaseCandidateActions:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8"]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - run: echo "Getting version"
      - uses: actions/checkout@master
        with:
            persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal access token.
            fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirments.txt
          pip install -r ci_requirments.txt
      - name: Set Credentials      
        run: |
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git config remote.origin.url 'https://${{ github.token }}@github.com/${{ github.repository }}'
      
      - name: Get Release Branch Name
        id: version_data  
        run: |
            RELEASE_BRANCH_NAME=$(python ./.github/Versions/VersionUpdateScript.py get_release_branch_name)
            echo "::set-output name=release_branch_name::$RELEASE_BRANCH_NAME"
            VERSION=$(python ./.github/Versions/VersionUpdateScript.py get_version)
            echo "::set-output name=current_version::$VERSION"
            echo "::set-output name=main_branch::${GITHUB_REF##*/}"
            
          
      - name: Print
        run: |
              echo ${{steps.version_data.outputs.release_branch_name}}
              echo ${{steps.version_data.outputs.current_version}}
              echo ${{steps.version_data.outputs.main_branch}}
      
      - run: echo "Branch creation"
      - name: Create release branch
        run: |
            git branch ${{steps.version_data.outputs.release_branch_name}}
            git push -u origin ${{steps.version_data.outputs.release_branch_name}}
            git checkout ${{steps.version_data.outputs.release_branch_name}}
            python ./.github/Versions/VersionUpdateScript.py create_initial_version_for_release
            git add .
            git commit -m "initial version for rc branch"
            git push
        id: create_release_branch  
        
      - run: echo "Master Version And Creat Local Tag"
      - name: UpdateVersionAndCreateLocalTag
        run: |
            git checkout ${{steps.version_data.outputs.main_branch}}
            git branch
            python ./.github/Versions/VersionUpdateScript.py inc-minor
            VERSION=$(python ./.github/Versions/VersionUpdateScript.py get_version)
            git tag -a $VERSION  -m "latest version"
            git add .
            git commit -m "current branch"
            git push
